{
  "name": "Controlled color bands",
  "id": "Gb9W7kAGLwGqrXhEB",
  "sources": {
    "main": "/*\n  Color bands\n  \n  Color bands has a chill vibe that comes from applying slower phase shifts to\n  shorter wavelengths.\n  \n  It's also a good pattern to learn about mixing in just the right amount of\n  desaturation (making whites, pinks, mints, etc) as well as modulating your\n  colors, white spots, and dark spots independently.\n*/\nexport var h_spread = 2\nexport function sliderHueSpread(v) {\n  h_spread = _map(v, 0, 1, 3, 0) // output values reversed so slider is more intuitive\n}\n\nvar h_rot\nexport function toggleHueMovement(v) {\n  h_rot = v\n}\n\nvar h_dir = -1\nexport function toggleHueDirection(v) {\n  h_dir = v ? -1 : 1\n}\n\nexport var h_speed\nexport function sliderHueSpeed(v) {\n  h_speed = _map(v, 0, 1, 0.99, 0.00001) // output values reversed so slider is more intuitive\n}\n\nexport var t1_speed = 0.25\nexport function sliderWhiteSpeed(v) {\n  t1_speed = _map(v, 0, 1, 0.99, 0.0001) // output values reversed so slider is more intuitive\n}\n\nexport var t2_speed = 0.15\nexport function sliderBlackSpeed(v) {\n  t2_speed = _map(v, 0, 1, 0.99, 0.0001) // output values reversed so slider is more intuitive\n}\n\n\nexport function beforeRender(delta) {\n  t1 = time(t1_speed)\n  t2 = time(t2_speed)\n  t3 = time(h_speed)\n}\n\nexport function render(index) {\n  h = wave(((index / pixelCount) * h_spread) + (t3 * h_rot * h_dir))\n  \n  // Create the areas where white is mixed in. Start with a wave.\n  s = wave(-index / 3 + t1)\n  \n  // A little desaturation goes a long way, so it's typical to start from 1 \n  // (saturated) and sharply dip to 0 to make white areas.\n  s = 1 - s * s * s * s\n  \n  // Create the slowly moving dark regions\n  v = wave(index / 2 + t2) * wave(index / 5 - t2) + wave(index / 7 + t2)\n  \n  v = v * v * v * v\n  hsv(h, s, v)\n}\n\n\nfunction _map(x, in_min, in_max, out_min, out_max) {\n  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n\n\n\n\n"
  },
  "preview": "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"
}