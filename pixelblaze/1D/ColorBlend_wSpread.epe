{
  "name": "Color Blend w/Spread",
  "id": "vqP8NKjgXe8YSm8jP",
  "sources": {
    "main": "/*\n  Color Blend w/Spread\n\n  Benjam Welker\n  \n  The Unlicense - https://opensource.org/license/unlicense\n\n  This pattern combines 3 wave patterns (red, blue, and green) of differing speeds\n  and direction and spread to form constantly changing color patterns.\n\n  The best results are had when one color is going reverse of the other two, and all are going different speeds.\n  \n  It also looks a lot better (at least in my opinion) when the spreads are different, but close to each other\n  i.e.- not with some of the colors very wide, and another color very small, or vice versa\n*/\n\n\n// the max spread amount (higher is tighter together)\nvar spreadMax = 50\n\n// speed min max (higher is faster, but harder to be precise)\nvar speedMax = 50\n\n// --- RED ---\n\nvar r_on = 1\nexport function toggleRed(_v) {\n  r_on = _v\n}\n\nvar rt\nexport var r_speed = -0.13\nexport function sliderRedSpeed(_v) {\n  // because the slider value gets passed into the time() function,\n  // it needs to have large numbers equal slow speeds and small numbers equal fast speeds,\n  // so to invert the values, the value is passed through the 1/m function.\n  // this gives very large numbers (very slow speeds) near the middle of the slider\n  // and very small numbers (very fast speeds) at the edge of the sliders\n  // while still keeping 0 in the middle.\n  var m = mix(speedMax, -speedMax, _v) // slider output is reversed so directions are intuitive\n\n  r_speed = (m != 0) ? 1/m : 0 // don't divide by 0, although it doesn't really break, it's just bad, you will make kittens cry\n}\n\nexport var r_spread = 2.7\nexport function sliderRedSpread(_v) {\n  r_spread = mix(spreadMax, 1, _v) // spread output is reversed so slider is more intuitive\n}\n\n// --- GREEN ---\n\nvar g_on = 1\nexport function toggleGreen(_v) {\n  g_on = _v\n}\n\nvar gt\nexport var g_speed = -0.13\nexport function sliderGreenSpeed(_v) {\n  var m = mix(speedMax, -speedMax, _v)\n  g_speed = (m != 0) ? 1/m : 0\n}\n\nexport var g_spread = 4.1\nexport function sliderGreenSpread(_v) {\n  g_spread = mix(spreadMax, 1, _v) // spread output is reversed so slider is more intuitive\n}\n\n// --- BLUE ---\n\nvar b_on = 1\nexport function toggleBlue(_v) {\n  b_on = _v\n}\n\nvar bt\nexport var b_speed = 0.15\nexport function sliderBlueSpeed(_v) {\n  var m = mix(speedMax, -speedMax, _v)\n  b_speed = (m != 0) ? 1/m : 0\n}\n\nexport var b_spread = 1.9\nexport function sliderBlueSpread(_v) {\n  b_spread = mix(spreadMax, 1, _v) // spread output is reversed so slider is more intuitive\n}\n\n\n/***********************************\n * RENDER FUNCTIONS\n ***********************************/\n\nexport function beforeRender(delta) {\n  rt = time(r_speed) % 1 // modulo with decimals... o_O\n  gt = time(g_speed) % 1\n  bt = time(b_speed) % 1\n}\n\nexport function render(index) {\n  // do common calculations outside of each color calculation\n  // this creates a value between the start of the strip (0) and the\n  // end of the strip (1) (via index/pixelCount), then multiplies that\n  // by the spread value to give (spread) number of wavelengths between\n  // the ends.\n  var ipc = (index/pixelCount)\n  \n  var r_idx = ipc * r_spread\n  var g_idx = ipc * g_spread\n  var b_idx = ipc * b_spread\n    \n  // add the time value to induce movement\n  var r = wave(r_idx + rt) * r_on // multiply by 1 or 0 to turn the color on or off\n  var g = wave(g_idx + gt) * g_on\n  var b = wave(b_idx + bt) * b_on\n\n  rgb(_gamma(r), _gamma(g), _gamma(b))\n}\n\n\n/***********************************\n * UTILITY FUNCTIONS\n ***********************************/\n\n/**\n * Map the incoming value x (with range between in_min and in_max) to\n * another value (with range between out_min and out_max)\n */\nfunction _map(x, in_min, in_max, out_min, out_max) {\n  var slope = (out_max - out_min) / (in_max - in_min)\n  return out_min + slope * (x - in_min);\n}\n\n/**\n * Adjust the incoming brightness value by the set Gamma value (2.2)\n * \n * This prevent colors from being too bright and giving them a nice and\n * easy ramp up to full brightness, instead of going too bright too fast\n * \n * Change Gamma value to either increase or decrease the ramp smoothness.\n * (Higher Gamma values produce darker color values)\n * \n * @param v A brightness value between 0 and 1\n */\nfunction _gamma(v) {\n  // gamma_value = 2.2\n  // return pow(v, gamma_value)\n\n  // alternatively, to increase FPS... (from ~40 to ~60 on my controller)\n  return v * v // not quite 2.2, but close enough. multiply by another v for even slower ramp up\n}\n\n\n"
  },
  "preview": "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"
}