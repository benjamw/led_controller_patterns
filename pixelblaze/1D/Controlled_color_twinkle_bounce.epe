{
  "name": "Controlled color twinkle bounce",
  "id": "J6oqoBCod4iGekj2h",
  "sources": {
    "main": "/* \n  Color twinkle bounce\n  \n  The wave math in this pattern shows forming a pattern in terms of the\n  traditional sin() / cos() functions instead of the unit-friendly wave().\n\n    1 | _                      1 | _ \n      |/ \\                     0_|/_\\____\n    0_|___\\_/___              -1 |   \\_/\n       0     1                    0     PI2\n\n       wave(x)                    sin(x)\n\n  As the docs on this page explain,\n\n    wave(x) = (1 + sin(x * PI2)) / 2\n*/\n\n/**\n * bounceSpeed goes between 1 (slow) and 0.1 (fast)\n */\nexport var bounceSpeed = 0.5\nexport function sliderBounceSpeed(v) {\n    bounceSpeed = -log(v+0.01)*0.2+0.02\n}\n\n/**\n * colorSpeed goes between 1 (slow) and 0.1 (fast)\n */\nexport var colorSpeed = 0.1\nexport function sliderColorSpeed(v) {\n    colorSpeed = -log(v+0.01)*0.2+0.02\n}\n\n/**\n * width goes between 1 (small) to 10 (big)\n */\nexport var width = 2\nexport function sliderWidth(v) {\n    width = mix(1, 10, v)\n}\n\n\nexport function beforeRender(delta) {\n  t1 = time(bounceSpeed) * PI2\n}\n\nexport var wave\nexport function render(index) {\n  wave = sin(t1)\n\n  /*\n    Start with hues bouncing back and forth. To do this, the phase shift \n    oscillates. Hue values from here are in 0..2. As a reminder, hsv() will \n    \"wrap\" the values outside of 0..1 for us.\n  */\n  h = 1 + sin(index / width + 5 * wave)\n  \n  // We'll also shift the hues over time, slower than the bouncing. Try \n  // commenting this out to see the hues move in lockstep.\n  h += time(colorSpeed)\n  /*\n    You might have noticed that timers are typically defined in the\n    beforeRender() function and therefore set between frames. Is it inefficient\n    to call time() in render()? Can time() progress between individual pixels'\n    calls to render()? The answer is no to both. time() is memoized, meaning it\n    returns a fast, consistent result for all calls within render() for a given\n    frame.\n  */\n\n  // Using the same period as the hue bounce, we'll set brightness `v`alues\n  // to zero to create space between pulses.\n  v = (1 + sin(index / width + 5 * wave)) * 2\n  \n  v = v * v * v * v // Gamma correction\n  hsv(h, 1, v)\n}\n"
  },
  "preview": "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"
}